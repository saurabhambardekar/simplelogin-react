{"version":3,"sources":["Login.js","Admin.js","Logout.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","username","password","loggedIn","onChange","bind","onSubmit","console","log","localStorage","e","this","setState","target","name","value","preventDefault","array","un","pwd","find","element","setItem","to","className","style","border","padding","marginTop","color","type","placeholder","Component","Admin","token","getItem","textTransform","Logout","removeItem","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5be7fd9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link,Redirect} from 'react-router-dom';\n\nexport default class Login extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            username:'',\n            password:'',\n            loggedIn:false\n        }\n        this.onChange=this.onChange.bind(this)\n        this.onSubmit=this.onSubmit.bind(this)\n        console.log(localStorage)\n    }\n    onChange(e){\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n    onSubmit(e){\n        e.preventDefault()          \n        const { username, password }=this.state\n        let newArray = [{un:'usera',pwd:'123'}, {un:'userb',pwd:'456'}]\n        let array = newArray.find(element=>element.un==username)\n        if (array!=null && password===array.pwd){\n            localStorage.setItem(\"token\",`${array.un}`)\n            this.setState({\n                loggedIn:true\n            })\n        }\n    }\n    render() {\n        if(this.state.loggedIn){\n            return <Redirect to=\"/admin\"/>\n        }\n        return (\n            <div>\n                <div className=\"row justify-content-center\">\n                <form onSubmit={this.onSubmit} className=\"form-signin\" style={{border:\"2px white dotted\",padding:\"2%\",marginTop:\"5%\"}}>\n                    <h1 className=\"h1 mb-4 font-weight-normal  \" style={{color:\"whitesmoke\"}}>Login Page</h1>\n                    <input type=\"text\" placeholder=\"Username\" name=\"username\" value={this.state.username} onChange={this.onChange} className=\"form-control\"/>\n                    <br/>\n                    <input type=\"password\" placeholder=\"Password\" name=\"password\" value={this.state.password} onChange={this.onChange} className=\"form-control\"/>\n                    <br/>\n                    <input type=\"submit\" className=\"btn btn-lg btn-primary btn-block\"/>\n                </form>\n                </div>\n                \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport {Link,Redirect} from 'react-router-dom'\nexport default class Admin extends Component {\n    constructor(props){\n        super(props)\n        const token = localStorage.getItem('token')\n        console.log(token)\n        let loggedIn = true\n        if (token== null){\n            loggedIn=false\n        }\n        this.state={\n            loggedIn,\n            token: token\n        }\n    }\n\n    render() {\n        if (this.state.loggedIn==false){\n            return <Redirect to=\"/\"></Redirect>\n        }\n        return (\n            <div >\n                <Link to=\"/logout\" className=\"btn btn-primary\">logout</Link>\n                <h1 style={{textTransform:'uppercase', color:\"whitesmoke\"}} className=\"col-4 display-2\">\n                    Welcome { this.state.token === 'usera'\n                    ? 'USER A'\n                    : 'USER B'\n                    }\n                </h1>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\n\nexport default class Logout extends Component {\n    constructor(props){\n        super(props)\n        localStorage.removeItem('token')\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"row justify-content-center pd-5\"><h1 className=\"display-5 col-4\" style={{color:\"whitesmoke\"}}>Logout Successful</h1></div>\n                <div className=\"row justify-content-center pd-5 \"><Link to=\"/\" className=\"btn btn-primary\">Login Again</Link></div>\n                \n\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Login from './Login';\nimport Admin from './Admin';\nimport Logout from './Logout';\n\nexport default function App() {\n  return (\n    <Router>\n        <Switch>\n          <Route path=\"/admin\">\n            <Admin />\n          </Route>\n          <Route path=\"/logout\">\n            <Logout />\n          </Route>\n          <Route path=\"/\">\n            <Login />\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}